{"version":3,"sources":["services/readings.js","services/sensors.js","components/CustomLineChart.js","components/Greeting.js","components/TimeDateDisplay.js","components/DataSummary.js","components/SensorTable.js","App.js","index.js"],"names":["axios","get","then","response","data","dateOptions","month","day","longerDateOptions","year","hour","minute","CustomLineChart","yDataKeys","yUnit","yDomain","xDataKey","boundaries","width","height","cx","cy","outerRadius","map","dataKey","type","stroke","dot","name","charAt","toUpperCase","slice","unit","vertical","tick","domain","allowDecimals","labelFormatter","value","Date","toLocaleDateString","boundary","x","label","Greeting","user","getHours","className","weekday","TimeDateDisplay","props","state","time","this","intervalID","setInterval","clearInterval","setState","Typography","variant","toLocaleString","undefined","second","React","Component","calculateAverage","array","sum","reduce","acc","val","Math","round","length","DataSummary","SensorTable","sensors","Table","TableHead","TableRow","TableBody","sensor","TableCell","firstonline","lastonline","_id","App","selectSensor","console","log","relevantReadings","readings","filter","reading","sensorname","selectedSensor","chosenReadings","handleTabChange","event","currentTab","filterReadings","handleRangeChange","range","toMilliseconds","days","getTime","date","calculateDateBoundaries","setHours","v","i","a","indexOf","sensorsService","readingsService","classes","root","Grid","container","spacing","alignItems","justify","item","xs","Tabs","onChange","indicatorColor","textColor","centered","Tab","as","onClick","justifyContent","md","Slider","slider","min","max","step","align","withStyles","flexGrow","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fce9e19.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseURL = '/api/readings'\n\n// Get all\nconst getAll = () => {\n  return axios.get(baseURL).then(response => response.data)\n}\n\n// Get for certain sensor\n\n// ?\n\nexport default {\n  getAll\n}","import axios from 'axios'\n\nconst baseURL = '/api/sensors'\n\n// Get all\nconst getAll = () => {\n  return axios.get(baseURL).then(response => response.data)\n}\n\nexport default {\n  getAll\n}","import React from 'react'\nimport { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ReferenceLine } from 'recharts'\n\nvar dateOptions = { month: 'numeric', day: 'numeric' };\nvar longerDateOptions = { month: 'numeric', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' };\n\nconst CustomLineChart = ({ data, yDataKeys, yUnit, yDomain, xDataKey, boundaries }) => {\n\n  return (\n    <ResponsiveContainer width='90%' height={300}>\n      <LineChart\n        cx=\"50%\"\n        cy=\"50%\"\n        outerRadius=\"80%\"\n        data={data}>\n        {\n          yDataKeys.map(dataKey => <Line\n            key={dataKey}\n            type=\"monotone\"\n            dataKey={dataKey}\n            stroke=\"#7D53DE\"\n            dot={false}\n            name={dataKey.charAt(0).toUpperCase() + dataKey.slice(1)}\n            unit={yUnit}\n          />)\n        }\n        <CartesianGrid stroke=\"#ccc\" vertical={false} />\n        <XAxis dataKey={xDataKey} tick={false} type=\"number\" domain={['dataMin', 'dataMax']} />\n        <YAxis type=\"number\" domain={yDomain} allowDecimals={false} />\n        <Tooltip labelFormatter={(value) => new Date(value).toLocaleDateString('en-GB', longerDateOptions)} />\n        {\n          boundaries.map(boundary =>\n            <ReferenceLine key={boundary} x={boundary} stroke=\"blue\" label={new Date(boundary).toLocaleDateString('en-GB', dateOptions)} />\n          )\n        }\n      </LineChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default CustomLineChart","import React from 'react';\n\nconst Greeting = ({ user }) => {\n  const hour = new Date().getHours();\n\n  if (hour >= 4 && hour <= 10) {\n    return (\n      <div className=\"greeting\">\n        Good Morning <br /> <span>{user}</span>\n      </div>\n    );\n  } else if (hour >= 22 || hour <= 3) {\n    return (\n      <div className=\"greeting\">\n        Good Night <br /> <span>{user}</span>\n      </div>\n    );\n  } else if (hour >= 18 && hour < 22) {\n    return (\n      <div className=\"greeting\">\n        Good Evening <br /> <span>{user}</span>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"greeting\">\n        Good Day <br /> <span>{user}</span>\n      </div>\n    );\n  }\n};\n\nexport default Greeting;\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography';\n\nvar dateOptions = { weekday: 'long', month: 'long', day: 'numeric' };\n\nclass TimeDateDisplay extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      time: new Date()\n    }\n  }\n\n  // When component is inserted into the DOM\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.tick(),\n      1000\n    )\n  }\n\n  // When component is removed from the DOM\n  componentWillUnmount() {\n    clearInterval(this.intervalID)\n  }\n\n  tick() {\n    this.setState({\n      time: new Date()\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"timeDateDisplay\">\n        <Typography variant=\"h2\">\n          {this.state.time.toLocaleString(undefined, {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          })}\n        </Typography>\n        <Typography variant=\"h6\">\n          {this.state.time.toLocaleDateString('en-GB', dateOptions)}\n        </Typography>\n      </div>\n    )\n  }\n}\n\nexport default TimeDateDisplay;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst calculateAverage = (array, dataKey) => {\n  const sum = array.reduce(function (acc, val) {\n    return acc + val[dataKey];\n  }, 0);\n  return Math.round((sum / array.length) * 100) / 100;\n};\n\nconst DataSummary = ({ data, boundaries }) => {\n  return (\n    <div>\n      <Typography variant=\"h5\">Data Summary</Typography>\n      <ul>\n        <li key=\"datapoints\">\n          {data.length} data points over {boundaries.length} days\n        </li>\n        <li key=\"temp\">\n          Average temperature {calculateAverage(data, 'temperature')}\n        </li>\n        <li key=\"hum\">Average humidity {calculateAverage(data, 'humidity')}</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default DataSummary;\n","import React, { Fragment } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst SensorTable = ({ sensors }) => {\n  return (\n    <Fragment>\n      <Typography variant=\"h5\">Sensors</Typography>\n\n      <Table>\n        <TableHead>\n          <TableRow>\n            <th>Sensorname</th>\n            <th>First online</th>\n            <th>Last online</th>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {sensors.map((sensor) => (\n            <TableRow key={sensor._id}>\n              <TableCell>{sensor.name}</TableCell>\n              <TableCell>\n                {new Date(sensor.firstonline).toLocaleString('fi-FI')}\n              </TableCell>\n              <TableCell>\n                {new Date(sensor.lastonline).toLocaleString('fi-FI')}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Fragment>\n  );\n};\n\nexport default SensorTable;\n","import React from 'react';\n\n// Services\nimport readingsService from './services/readings';\nimport sensorsService from './services/sensors';\n\n// Components\n// import NavBar from './components/NavBar';\nimport CustomLineChart from './components/CustomLineChart';\nimport Greeting from './components/Greeting';\nimport TimeDateDisplay from './components/TimeDateDisplay';\nimport DataSummary from './components/DataSummary';\nimport SensorTable from './components/SensorTable';\n\n// Material-UI\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\n// --- Grid\nimport Grid from '@material-ui/core/Grid';\n\n// --- Tabs\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\n// --- Forms & Inputs\nimport Slider from '@material-ui/core/Slider';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  slider: {\n    padding: '22px 0px',\n  },\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sensors: [],\n      readings: [],\n      chosenReadings: [],\n      selectedSensor: undefined,\n      currentTab: 0,\n      range: 14,\n    };\n\n    console.log('constructor');\n  }\n\n  componentDidMount() {\n    console.log('App did mount');\n\n    sensorsService.getAll().then((response) => {\n      console.log('Sensors promise fulfilled');\n      this.setState({\n        sensors: response,\n        selectedSensor: response[0].name,\n      });\n    });\n\n    readingsService.getAll().then((response) => {\n      console.log('Readings promise fulfilled');\n\n      this.setState({\n        readings: response,\n      });\n      this.filterReadings();\n    });\n    this.setState({\n      currentTab: 0,\n    });\n  }\n\n  selectSensor = (name) => {\n    return () => {\n      console.log(`Sensor ${name} is being selected`);\n      const relevantReadings = !name\n        ? this.state.readings\n        : this.state.readings.filter((reading) => reading.sensorname === name);\n      this.setState({\n        selectedSensor: name,\n        chosenReadings: relevantReadings,\n      });\n    };\n  };\n\n  handleTabChange = (event, value) => {\n    this.setState({ currentTab: value });\n    this.filterReadings();\n  };\n\n  handleRangeChange = (event, value) => {\n    this.setState({ range: value });\n    this.filterReadings();\n  };\n\n  toMilliseconds = (days) => {\n    return days * 24 * 60 * 60 * 1000;\n  };\n\n  filterReadings = () => {\n    // Filter by sensor\n    const sensorReadings = !this.selectedSensor\n      ? this.state.readings\n      : this.state.readings.filter(\n          (reading) => reading.sensorname === this.state.selectedSensor\n        );\n    // Filter by timerange\n    const relevantReadings = sensorReadings.filter(\n      (reading) =>\n        new Date().getTime() - new Date(reading.date).getTime() <=\n        this.toMilliseconds(this.state.range)\n    );\n\n    this.setState({\n      chosenReadings: relevantReadings,\n    });\n  };\n\n  calculateDateBoundaries = () => {\n    const boundaries = this.state.chosenReadings\n      .map((reading) => new Date(reading.date).setHours(0, 0, 0, 0, 0))\n      .filter((v, i, a) => a.indexOf(v) === i)\n      .map((date) => new Date(date).getTime());\n    return boundaries;\n  };\n\n  calculateAverage = (array, dataKey) => {\n    const sum = array.reduce(function (acc, val) {\n      return acc + val[dataKey];\n    }, 0);\n    return Math.round((sum / array.length) * 100) / 100;\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        {/* <NavBar /> */}\n\n        <Grid container spacing={8} alignItems=\"center\" justify=\"center\">\n          <Grid item xs={6}>\n            <Greeting user={'Ossian'} />\n          </Grid>\n\n          <Grid item xs={6}>\n            <TimeDateDisplay />\n          </Grid>\n        </Grid>\n        <Tabs\n          value={this.state.currentTab}\n          onChange={this.handleTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          centered\n        >\n          <Tab\n            key={'all'}\n            as=\"button\"\n            onClick={this.selectSensor(undefined)}\n            label={'All'}\n          />\n          {this.state.sensors.map((sensor) => (\n            <Tab\n              key={sensor.name}\n              as=\"button\"\n              onClick={this.selectSensor(sensor.name)}\n              label={sensor.name}\n            />\n          ))}\n        </Tabs>\n        <Grid\n          container\n          spacing={8}\n          alignItems=\"flex-start\"\n          justifyContent=\"space-around\"\n        >\n          <Grid item xs={10} md={8}>\n            <Slider\n              classes={{ container: classes.slider }}\n              value={this.state.range}\n              min={1}\n              max={14}\n              step={1}\n              onChange={this.handleRangeChange}\n            />\n            <p>\n              {this.state.range} {this.state.range < 1 ? ' hours' : ' day(s)'}\n            </p>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Typography align=\"center\" variant=\"h5\">\n              Temperature\n            </Typography>\n            <CustomLineChart\n              data={this.state.chosenReadings}\n              yDataKeys={['temperature', 'temperatureOut']}\n              yUnit={'°'}\n              yDomain={[-10, 30]}\n              xDataKey={'date'}\n              boundaries={this.calculateDateBoundaries()}\n            />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Typography align=\"center\" variant=\"h5\">\n              Humidity\n            </Typography>\n            <CustomLineChart\n              data={this.state.chosenReadings}\n              yDataKeys={['humidity', 'humidityOut']}\n              yUnit={'%'}\n              yDomain={[10, 100]}\n              xDataKey={'date'}\n              boundaries={this.calculateDateBoundaries()}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <DataSummary\n              data={this.state.chosenReadings}\n              boundaries={this.calculateDateBoundaries()}\n            />\n          </Grid>\n          <Grid item xs={12} md={8}>\n            <SensorTable sensors={this.state.sensors}></SensorTable>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}